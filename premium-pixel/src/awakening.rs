use crate::Surface;

/// Write on a surface using the Awakening typeface
pub trait Awakening {
    /// Write the text with the baseline starting at the given position.
    /// Returns the width of the text in pixels.
    fn awakening(&mut self, x: i32, y: i32, text: &str) -> i32;
}

impl<S: Surface> Awakening for S {
    fn awakening(&mut self, x: i32, y: i32, text: &str) -> i32 {
        let mut k = 0;
        let mut w = 0;
        for glyph in Glyphs::from(text) {
            let b = glyph.data().next().unwrap_or(0);
            if (k | (k << 1)) & (b | (b << 1)) != 0 {
                w += 1;
            }
            for col in glyph.data() {
                for i in 0..16 {
                    if col & (1 << i) != 0 {
                        self.pixel(x + w, y - 10 + i);
                    }
                }
                k = col;
                w += 1;
            }
        }
        w
    }
}

struct Glyphs<'a> {
    text: &'a [u8],
}

struct GlyphLookup<'a>(&'a [u8]);

struct Glyph<'a> {
    text: &'a [u8],
    data: &'a [u8],
    tall: bool,
}

struct GlyphData<'a> {
    data: &'a [u8],
    tall: bool,
}

impl<'a> From<&'a str> for Glyphs<'a> {
    fn from(value: &'a str) -> Self {
        Self {
            text: value.as_bytes(),
        }
    }
}

impl Iterator for Glyphs<'_> {
    type Item = Glyph<'static>;
    fn next(&mut self) -> Option<Self::Item> {
        'not_found: while !self.text.is_empty() {
            let b = *self.text.first()?;
            if b == b' ' {
                self.text = &self.text[1..];
                return Some(SPACE);
            }
            let start = INDEX[b as usize >> 2];
            if start < 0 {
                self.text = &self.text[1..];
                continue 'not_found;
            }
            for glyph in GlyphLookup(&DATA[start as usize..]) {
                if self.text.starts_with(glyph.text) {
                    self.text = &self.text[glyph.text.len()..];
                    return Some(glyph);
                } else if glyph.text[0] > self.text[0] {
                    self.text = &self.text[1..];
                    continue 'not_found;
                }
            }
        }
        None
    }
}

impl<'a> Iterator for GlyphLookup<'a> {
    type Item = Glyph<'a>;
    fn next(&mut self) -> Option<Self::Item> {
        let mut s = self.0;
        let l = *s.first()? as usize;
        s = &s[1..];
        let text = s.get(..l)?;
        s = &s[l..];
        let l = *s.first()? as usize;
        let tall = l & 128 != 0;
        let l = l & 127;
        s = &s[1..];
        let data = s.get(..l)?;
        s = &s[l..];
        self.0 = s;
        Some(Glyph { text, data, tall })
    }
}

impl<'a> Glyph<'a> {
    fn data(&self) -> GlyphData<'a> {
        GlyphData {
            data: self.data,
            tall: self.tall,
        }
    }
}

impl Iterator for GlyphData<'_> {
    type Item = u16;
    fn next(&mut self) -> Option<Self::Item> {
        if self.tall {
            let col = u16::from_le_bytes([*self.data.first()?, *self.data.get(1)?]);
            self.data = &self.data[2..];
            Some(col)
        } else {
            let col = u16::from(*self.data.first()?) << 4;
            self.data = &self.data[1..];
            Some(col)
        }
    }
}

const SPACE: Glyph<'static> = Glyph {
    text: b" ",
    data: &[0, 0, 0],
    tall: false,
};
const DATA: &[u8] = &[
    /* "\b" */ 1, 8, 1, 0, /* "\t" */ 1, 9, 8, 0, 0, 0, 0, 0, 0, 0, 0, /* "!" */ 1,
    33, 1, 46, /* "\"" */ 1, 34, 3, 3, 0, 3, /* "#" */ 1, 35, 5, 20, 62, 20, 62, 20,
    /* "$" */ 1, 36, 5, 36, 42, 107, 42, 18, /* "%" */ 1, 37, 5, 34, 16, 8, 4, 34,
    /* "&" */ 1, 38, 5, 20, 42, 42, 20, 40, /* "'" */ 1, 39, 1, 3, /* "(" */ 1, 40,
    2, 62, 65, /* ")" */ 1, 41, 2, 65, 62, /* "+" */ 1, 43, 5, 8, 8, 62, 8, 8,
    /* "," */ 1, 44, 2, 64, 32, /* "-" */ 1, 45, 4, 8, 8, 8, 8, /* "." */ 1, 46, 1,
    32, /* "/" */ 1, 47, 5, 32, 16, 8, 4, 2, /* "0" */ 1, 48, 5, 30, 33, 37, 33, 30,
    /* "1" */ 1, 49, 3, 34, 63, 32, /* "2" */ 1, 50, 5, 34, 49, 41, 41, 38,
    /* "3" */ 1, 51, 5, 18, 33, 33, 37, 26, /* "4" */ 1, 52, 5, 24, 20, 18, 63, 16,
    /* "5" */ 1, 53, 5, 23, 37, 37, 37, 25, /* "6" */ 1, 54, 5, 28, 38, 37, 37, 24,
    /* "7" */ 1, 55, 5, 1, 1, 57, 5, 3, /* "8" */ 1, 56, 5, 26, 37, 37, 37, 26,
    /* "9" */ 1, 57, 5, 6, 73, 41, 25, 14, /* ":" */ 1, 58, 1, 20, /* ";" */ 1, 59,
    2, 64, 40, /* "<" */ 1, 60, 3, 8, 20, 34, /* "=" */ 1, 61, 3, 20, 20, 20,
    /* ">" */ 1, 62, 3, 34, 20, 8, /* "?" */ 1, 63, 5, 4, 2, 42, 10, 4, /* "@" */ 1,
    64, 7, 62, 65, 93, 85, 93, 81, 14, /* "A" */ 1, 65, 5, 62, 9, 9, 9, 62, /* "B" */ 1,
    66, 5, 63, 37, 37, 37, 26, /* "C" */ 1, 67, 5, 30, 33, 33, 33, 34, /* "D" */ 1, 68,
    5, 63, 33, 33, 34, 28, /* "E" */ 1, 69, 5, 63, 37, 37, 37, 33, /* "F" */ 1, 70, 5,
    63, 5, 5, 5, 1, /* "G" */ 1, 71, 5, 28, 34, 33, 41, 58, /* "H" */ 1, 72, 5, 63, 4, 4,
    4, 63, /* "I" */ 1, 73, 3, 33, 63, 33, /* "J" */ 1, 74, 5, 16, 32, 32, 33, 31,
    /* "K" */ 1, 75, 5, 63, 0, 12, 18, 33, /* "L" */ 1, 76, 5, 63, 32, 32, 32, 32,
    /* "M" */ 1, 77, 5, 63, 2, 4, 2, 63, /* "N" */ 1, 78, 5, 63, 6, 12, 24, 63,
    /* "O" */ 1, 79, 5, 30, 33, 33, 33, 30, /* "P" */ 1, 80, 5, 63, 9, 9, 9, 6,
    /* "Q" */ 1, 81, 5, 30, 33, 41, 17, 46, /* "R" */ 1, 82, 5, 63, 5, 13, 21, 34,
    /* "S" */ 1, 83, 5, 18, 37, 37, 37, 24, /* "T" */ 1, 84, 5, 1, 1, 63, 1, 1,
    /* "U" */ 1, 85, 5, 31, 32, 32, 32, 31, /* "V" */ 1, 86, 5, 15, 16, 32, 16, 15,
    /* "W" */ 1, 87, 5, 63, 16, 8, 16, 63, /* "X" */ 1, 88, 5, 33, 18, 12, 18, 33,
    /* "Y" */ 1, 89, 5, 3, 4, 56, 4, 3, /* "Z" */ 1, 90, 5, 33, 49, 45, 35, 33,
    /* "[" */ 1, 91, 2, 127, 65, /* "\\" */ 1, 92, 5, 2, 4, 8, 16, 32, /* "]" */ 1,
    93, 2, 65, 127, /* "_" */ 1, 95, 4, 32, 32, 32, 32, /* "a" */ 1, 97, 5, 16, 42, 42,
    42, 60, /* "b" */ 1, 98, 5, 63, 36, 34, 34, 28, /* "c" */ 1, 99, 5, 28, 34, 34, 34,
    36, /* "d" */ 1, 100, 5, 28, 34, 34, 36, 63, /* "e" */ 1, 101, 5, 28, 42, 42, 42, 12,
    /* "ff" */ 2, 102, 102, 7, 8, 126, 9, 9, 126, 9, 1, /* "f" */ 1, 102, 4, 8, 126, 9,
    1, /* "g" */ 1, 103, 5, 24, 164, 162, 146, 126, /* "h" */ 1, 104, 5, 63, 4, 2, 2, 60,
    /* "i" */ 1, 105, 2, 4, 61, /* "j" */ 1, 106, 3, 128, 132, 125, /* "k" */ 1,
    107, 4, 63, 8, 20, 34, /* "l" */ 1, 108, 2, 1, 63, /* "m" */ 1, 109, 5, 62, 4, 8, 4,
    62, /* "n" */ 1, 110, 5, 62, 2, 2, 4, 56, /* "o" */ 1, 111, 5, 28, 34, 34, 34, 28,
    /* "p" */ 1, 112, 5, 254, 34, 34, 36, 24, /* "q" */ 1, 113, 5, 24, 36, 34, 34, 254,
    /* "r" */ 1, 114, 4, 62, 4, 2, 2, /* "s" */ 1, 115, 5, 36, 42, 42, 42, 16,
    /* "t" */ 1, 116, 4, 2, 31, 34, 32, /* "u" */ 1, 117, 5, 14, 16, 32, 32, 62,
    /* "v" */ 1, 118, 5, 14, 16, 32, 16, 14, /* "w" */ 1, 119, 5, 62, 16, 8, 16, 62,
    /* "x" */ 1, 120, 5, 34, 20, 8, 20, 34, /* "y" */ 1, 121, 5, 142, 144, 144, 72, 62,
    /* "z" */ 1, 122, 5, 34, 50, 42, 38, 34, /* "{" */ 1, 123, 3, 8, 54, 65,
    /* "|" */ 1, 124, 1, 127, /* "}" */ 1, 125, 3, 65, 54, 8, /* "¡" */ 2, 194,
    161, 1, 116, /* "©" */ 2, 194, 169, 8, 30, 33, 12, 18, 18, 20, 33, 30, /* "«" */ 2,
    194, 171, 4, 8, 20, 8, 20, /* "°" */ 2, 194, 176, 3, 7, 5, 7, /* "µ" */ 2, 194,
    181, 5, 254, 16, 32, 32, 62, /* "»" */ 2, 194, 187, 4, 20, 8, 20, 8, /* "¿" */ 2,
    194, 191, 5, 32, 80, 84, 64, 32, /* "À" */ 2, 195, 128, 138, 224, 3, 148, 0, 152, 0, 144,
    0, 224, 3, /* "Á" */ 2, 195, 129, 138, 224, 3, 144, 0, 152, 0, 148, 0, 224, 3,
    /* "Â" */ 2, 195, 130, 138, 224, 3, 152, 0, 148, 0, 152, 0, 224, 3, /* "Ä" */ 2,
    195, 132, 138, 224, 3, 148, 0, 144, 0, 148, 0, 224, 3, /* "Æ" */ 2, 195, 134, 9, 62, 9,
    9, 9, 63, 37, 37, 37, 33, /* "Ç" */ 2, 195, 135, 5, 30, 161, 225, 33, 18,
    /* "È" */ 2, 195, 136, 138, 240, 3, 84, 2, 88, 2, 80, 2, 16, 2, /* "É" */ 2, 195,
    137, 138, 240, 3, 80, 2, 88, 2, 84, 2, 16, 2, /* "Ê" */ 2, 195, 138, 138, 240, 3, 88, 2,
    84, 2, 88, 2, 16, 2, /* "Ë" */ 2, 195, 139, 138, 240, 3, 84, 2, 80, 2, 84, 2, 16, 2,
    /* "Í" */ 2, 195, 141, 134, 16, 2, 248, 3, 20, 2, /* "Î" */ 2, 195, 142, 134, 24,
    2, 244, 3, 24, 2, /* "Ï" */ 2, 195, 143, 134, 20, 2, 240, 3, 20, 2, /* "Ð" */ 2,
    195, 144, 6, 8, 63, 41, 33, 34, 28, /* "Ñ" */ 2, 195, 145, 5, 62, 5, 10, 17, 62,
    /* "Ó" */ 2, 195, 147, 138, 224, 1, 16, 2, 24, 2, 20, 2, 224, 1, /* "Ô" */ 2, 195,
    148, 138, 224, 1, 24, 2, 20, 2, 24, 2, 224, 1, /* "Ö" */ 2, 195, 150, 138, 224, 1, 20, 2,
    16, 2, 20, 2, 224, 1, /* "Ù" */ 2, 195, 153, 138, 240, 1, 4, 2, 8, 2, 0, 2, 240, 1,
    /* "Ú" */ 2, 195, 154, 138, 240, 1, 0, 2, 8, 2, 4, 2, 240, 1, /* "Û" */ 2, 195,
    155, 138, 240, 1, 8, 2, 4, 2, 8, 2, 240, 1, /* "Ü" */ 2, 195, 156, 138, 240, 1, 4, 2, 0,
    2, 4, 2, 240, 1, /* "Ý" */ 2, 195, 157, 138, 48, 0, 64, 0, 136, 3, 68, 0, 48, 0,
    /* "Þ" */ 2, 195, 158, 4, 63, 18, 18, 12, /* "ß" */ 2, 195, 159, 4, 62, 1, 41, 22,
    /* "à" */ 2, 195, 160, 138, 0, 1, 168, 2, 176, 2, 160, 2, 192, 3, /* "á" */ 2, 195,
    161, 138, 0, 1, 160, 2, 176, 2, 168, 2, 192, 3, /* "â" */ 2, 195, 162, 138, 0, 1, 176, 2,
    168, 2, 176, 2, 192, 3, /* "ä" */ 2, 195, 164, 138, 0, 1, 168, 2, 160, 2, 168, 2, 192, 3,
    /* "æ" */ 2, 195, 166, 9, 16, 42, 42, 42, 60, 42, 42, 42, 12, /* "ç" */ 2, 195,
    167, 5, 28, 162, 226, 34, 36, /* "è" */ 2, 195, 168, 138, 192, 1, 168, 2, 176, 2, 160, 2,
    192, 0, /* "é" */ 2, 195, 169, 138, 192, 1, 160, 2, 176, 2, 168, 2, 192, 0,
    /* "ê" */ 2, 195, 170, 138, 192, 1, 176, 2, 168, 2, 176, 2, 192, 0, /* "ë" */ 2,
    195, 171, 138, 192, 1, 168, 2, 160, 2, 168, 2, 192, 0, /* "í" */ 2, 195, 173, 132, 80, 0,
    200, 3, /* "î" */ 2, 195, 174, 134, 80, 0, 200, 3, 16, 0, /* "ï" */ 2, 195, 175, 3,
    5, 60, 1, /* "ð" */ 2, 195, 176, 138, 128, 1, 72, 2, 104, 2, 80, 2, 232, 1,
    /* "ó" */ 2, 195, 179, 138, 192, 1, 32, 2, 48, 2, 40, 2, 192, 1, /* "ô" */ 2, 195,
    180, 138, 192, 1, 48, 2, 40, 2, 48, 2, 192, 1, /* "ö" */ 2, 195, 182, 138, 192, 1, 40, 2,
    32, 2, 40, 2, 192, 1, /* "ù" */ 2, 195, 185, 138, 224, 0, 8, 1, 16, 2, 0, 2, 224, 3,
    /* "ú" */ 2, 195, 186, 138, 224, 0, 0, 1, 16, 2, 8, 2, 224, 3, /* "û" */ 2, 195,
    187, 138, 224, 0, 16, 1, 8, 2, 16, 2, 224, 3, /* "ü" */ 2, 195, 188, 138, 224, 0, 8, 1,
    0, 2, 8, 2, 224, 3, /* "ý" */ 2, 195, 189, 138, 224, 8, 0, 9, 16, 9, 136, 4, 224, 3,
    /* "þ" */ 2, 195, 190, 5, 255, 36, 34, 34, 28, /* "Œ" */ 2, 197, 146, 9, 30, 33,
    33, 33, 63, 37, 37, 37, 33, /* "œ" */ 2, 197, 147, 9, 28, 34, 34, 34, 28, 42, 42, 42, 12,
    /* "Ω" */ 2, 206, 169, 5, 46, 49, 1, 49, 46, /* "‘" */ 3, 226, 128, 152, 2, 6, 5,
    /* "’" */ 3, 226, 128, 153, 2, 5, 3, /* "‚" */ 3, 226, 128, 154, 2, 80, 48,
    /* "“" */ 3, 226, 128, 156, 5, 6, 5, 0, 6, 5, /* "”" */ 3, 226, 128, 157, 5, 5,
    3, 0, 5, 3, /* "„" */ 3, 226, 128, 158, 5, 80, 48, 0, 80, 48, /* "…" */ 3, 226,
    128, 166, 5, 32, 0, 32, 0, 32,
];
const INDEX: [i16; 64] = [
    -1, -1, 0, -1, -1, -1, -1, -1, 15, 33, 61, 79, 103, 133, 165, 190, 216, 250, 282, 312, 344,
    376, 408, 437, 457, 481, 523, 549, 578, 609, 640, 670, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, 680, 1343, -1, 1369, -1, -1, -1, -1, 1378, -1, -1, -1, -1, -1, -1, -1,
];
